Terminals unused in grammar

   semicolon


Grammar

    0 $accept: S $end

    1 S: HEAD DATA PROC kw_sr

    2 HEAD: kw_identification kw_division dot kw_program dot idf dot

    3 DATA: kw_data kw_division dot kw_ws kw_section dot DEC

    4 PROC: kw_procedure kw_division dot INST

    5 DEC: VARLISTE dot DEC
    6    | idf kw_line t_int verg kw_size t_int TYPE dot DEC
    7    | kw_const idf TYPE dot DEC
    8    | kw_const idf equal CST dot DEC
    9    | /* empty */

   10 VARLISTE: idf bar VARLISTE
   11         | idf TYPE

   12 TYPE: kw_int
   13     | kw_float
   14     | kw_char
   15     | kw_str

   16 CST: t_int
   17    | t_float
   18    | t_char
   19    | t_str

   20 INST: idf equal EXP dot INST
   21     | f_accept ob t_str colon at idf cb dot INST
   22     | f_display ob t_str FORM cb dot INST
   23     | kw_if COND colon INST ELSE kw_end dot INST
   24     | kw_move EXP kw_to EXP INST kw_end dot INST
   25     | /* empty */

   26 ELSE: kw_else colon INST
   27     | /* empty */

   28 EXP: EXP ARITH EXPU
   29    | EXPU

   30 EXPU: CST
   31     | idf
   32     | ob EXP cb

   33 FORM: colon at idf FORMU
   34     | /* empty */

   35 FORMU: verg at idf FORMU
   36      | /* empty */

   37 COND: COND LO CONDU
   38     | CONDU

   39 CONDU: ob EXP CO EXP cb
   40      | lo_not ob COND cb
   41      | ob COND cb

   42 ARITH: plus
   43      | minus
   44      | multi
   45      | division

   46 LO: lo_and
   47   | lo_or

   48 CO: co_g
   49   | co_l
   50   | co_ge
   51   | co_le
   52   | co_eq
   53   | co_diff


Terminals, with rules where they appear

$end (0) 0
error (256)
kw_int (258) 12
kw_float (259) 13
kw_str (260) 15
kw_char (261) 14
kw_program (262) 2
kw_division (263) 2 3 4
kw_section (264) 3
kw_identification (265) 2
kw_data (266) 3
kw_ws (267) 3
kw_procedure (268) 4
kw_line (269) 6
kw_size (270) 6
kw_sr (271) 1
f_accept (272) 21
f_display (273) 22
kw_if (274) 23
kw_else (275) 26
kw_move (276) 24
kw_to (277) 24
kw_end (278) 23 24
kw_const (279) 7 8
lo_and (280) 46
lo_or (281) 47
lo_not (282) 40
at (283) 21 33 35
idf (284) 2 6 7 8 10 11 20 21 31 33 35
t_int (285) 6 16
t_float (286) 17
t_char (287) 18
t_str (288) 19 21 22
equal (289) 8 20
dot (290) 2 3 4 5 6 7 8 20 21 22 23 24
colon (291) 21 23 26 33
semicolon (292)
verg (293) 6 35
bar (294) 10
plus (295) 42
minus (296) 43
multi (297) 44
division (298) 45
ob (299) 21 22 32 39 40 41
cb (300) 21 22 32 39 40 41
co_g (301) 48
co_l (302) 49
co_ge (303) 50
co_le (304) 51
co_eq (305) 52
co_diff (306) 53


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
S (53)
    on left: 1, on right: 0
HEAD (54)
    on left: 2, on right: 1
DATA (55)
    on left: 3, on right: 1
PROC (56)
    on left: 4, on right: 1
DEC (57)
    on left: 5 6 7 8 9, on right: 3 5 6 7 8
VARLISTE (58)
    on left: 10 11, on right: 5 10
TYPE (59)
    on left: 12 13 14 15, on right: 6 7 11
CST (60)
    on left: 16 17 18 19, on right: 8 30
INST (61)
    on left: 20 21 22 23 24 25, on right: 4 20 21 22 23 24 26
ELSE (62)
    on left: 26 27, on right: 23
EXP (63)
    on left: 28 29, on right: 20 24 28 32 39
EXPU (64)
    on left: 30 31 32, on right: 28 29
FORM (65)
    on left: 33 34, on right: 22
FORMU (66)
    on left: 35 36, on right: 33 35
COND (67)
    on left: 37 38, on right: 23 37 40 41
CONDU (68)
    on left: 39 40 41, on right: 37 38
ARITH (69)
    on left: 42 43 44 45, on right: 28
LO (70)
    on left: 46 47, on right: 37
CO (71)
    on left: 48 49 50 51 52 53, on right: 39


state 0

    0 $accept: . S $end

    kw_identification  shift, and go to state 1

    S     go to state 2
    HEAD  go to state 3


state 1

    2 HEAD: kw_identification . kw_division dot kw_program dot idf dot

    kw_division  shift, and go to state 4


state 2

    0 $accept: S . $end

    $end  shift, and go to state 5


state 3

    1 S: HEAD . DATA PROC kw_sr

    kw_data  shift, and go to state 6

    DATA  go to state 7


state 4

    2 HEAD: kw_identification kw_division . dot kw_program dot idf dot

    dot  shift, and go to state 8


state 5

    0 $accept: S $end .

    $default  accept


state 6

    3 DATA: kw_data . kw_division dot kw_ws kw_section dot DEC

    kw_division  shift, and go to state 9


state 7

    1 S: HEAD DATA . PROC kw_sr

    kw_procedure  shift, and go to state 10

    PROC  go to state 11


state 8

    2 HEAD: kw_identification kw_division dot . kw_program dot idf dot

    kw_program  shift, and go to state 12


state 9

    3 DATA: kw_data kw_division . dot kw_ws kw_section dot DEC

    dot  shift, and go to state 13


state 10

    4 PROC: kw_procedure . kw_division dot INST

    kw_division  shift, and go to state 14


state 11

    1 S: HEAD DATA PROC . kw_sr

    kw_sr  shift, and go to state 15


state 12

    2 HEAD: kw_identification kw_division dot kw_program . dot idf dot

    dot  shift, and go to state 16


state 13

    3 DATA: kw_data kw_division dot . kw_ws kw_section dot DEC

    kw_ws  shift, and go to state 17


state 14

    4 PROC: kw_procedure kw_division . dot INST

    dot  shift, and go to state 18


state 15

    1 S: HEAD DATA PROC kw_sr .

    $default  reduce using rule 1 (S)


state 16

    2 HEAD: kw_identification kw_division dot kw_program dot . idf dot

    idf  shift, and go to state 19


state 17

    3 DATA: kw_data kw_division dot kw_ws . kw_section dot DEC

    kw_section  shift, and go to state 20


state 18

    4 PROC: kw_procedure kw_division dot . INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 26


state 19

    2 HEAD: kw_identification kw_division dot kw_program dot idf . dot

    dot  shift, and go to state 27


state 20

    3 DATA: kw_data kw_division dot kw_ws kw_section . dot DEC

    dot  shift, and go to state 28


state 21

   21 INST: f_accept . ob t_str colon at idf cb dot INST

    ob  shift, and go to state 29


state 22

   22 INST: f_display . ob t_str FORM cb dot INST

    ob  shift, and go to state 30


state 23

   23 INST: kw_if . COND colon INST ELSE kw_end dot INST

    lo_not  shift, and go to state 31
    ob      shift, and go to state 32

    COND   go to state 33
    CONDU  go to state 34


state 24

   24 INST: kw_move . EXP kw_to EXP INST kw_end dot INST

    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 40

    CST   go to state 41
    EXP   go to state 42
    EXPU  go to state 43


state 25

   20 INST: idf . equal EXP dot INST

    equal  shift, and go to state 44


state 26

    4 PROC: kw_procedure kw_division dot INST .

    $default  reduce using rule 4 (PROC)


state 27

    2 HEAD: kw_identification kw_division dot kw_program dot idf dot .

    $default  reduce using rule 2 (HEAD)


state 28

    3 DATA: kw_data kw_division dot kw_ws kw_section dot . DEC

    kw_const  shift, and go to state 45
    idf       shift, and go to state 46

    $default  reduce using rule 9 (DEC)

    DEC       go to state 47
    VARLISTE  go to state 48


state 29

   21 INST: f_accept ob . t_str colon at idf cb dot INST

    t_str  shift, and go to state 49


state 30

   22 INST: f_display ob . t_str FORM cb dot INST

    t_str  shift, and go to state 50


state 31

   40 CONDU: lo_not . ob COND cb

    ob  shift, and go to state 51


state 32

   39 CONDU: ob . EXP CO EXP cb
   41      | ob . COND cb

    lo_not   shift, and go to state 31
    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 52

    CST    go to state 41
    EXP    go to state 53
    EXPU   go to state 43
    COND   go to state 54
    CONDU  go to state 34


state 33

   23 INST: kw_if COND . colon INST ELSE kw_end dot INST
   37 COND: COND . LO CONDU

    lo_and  shift, and go to state 55
    lo_or   shift, and go to state 56
    colon   shift, and go to state 57

    LO  go to state 58


state 34

   38 COND: CONDU .

    $default  reduce using rule 38 (COND)


state 35

   31 EXPU: idf .

    $default  reduce using rule 31 (EXPU)


state 36

   16 CST: t_int .

    $default  reduce using rule 16 (CST)


state 37

   17 CST: t_float .

    $default  reduce using rule 17 (CST)


state 38

   18 CST: t_char .

    $default  reduce using rule 18 (CST)


state 39

   19 CST: t_str .

    $default  reduce using rule 19 (CST)


state 40

   32 EXPU: ob . EXP cb

    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 40

    CST   go to state 41
    EXP   go to state 59
    EXPU  go to state 43


state 41

   30 EXPU: CST .

    $default  reduce using rule 30 (EXPU)


state 42

   24 INST: kw_move EXP . kw_to EXP INST kw_end dot INST
   28 EXP: EXP . ARITH EXPU

    kw_to     shift, and go to state 60
    plus      shift, and go to state 61
    minus     shift, and go to state 62
    multi     shift, and go to state 63
    division  shift, and go to state 64

    ARITH  go to state 65


state 43

   29 EXP: EXPU .

    $default  reduce using rule 29 (EXP)


state 44

   20 INST: idf equal . EXP dot INST

    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 40

    CST   go to state 41
    EXP   go to state 66
    EXPU  go to state 43


state 45

    7 DEC: kw_const . idf TYPE dot DEC
    8    | kw_const . idf equal CST dot DEC

    idf  shift, and go to state 67


state 46

    6 DEC: idf . kw_line t_int verg kw_size t_int TYPE dot DEC
   10 VARLISTE: idf . bar VARLISTE
   11         | idf . TYPE

    kw_int    shift, and go to state 68
    kw_float  shift, and go to state 69
    kw_str    shift, and go to state 70
    kw_char   shift, and go to state 71
    kw_line   shift, and go to state 72
    bar       shift, and go to state 73

    TYPE  go to state 74


state 47

    3 DATA: kw_data kw_division dot kw_ws kw_section dot DEC .

    $default  reduce using rule 3 (DATA)


state 48

    5 DEC: VARLISTE . dot DEC

    dot  shift, and go to state 75


state 49

   21 INST: f_accept ob t_str . colon at idf cb dot INST

    colon  shift, and go to state 76


state 50

   22 INST: f_display ob t_str . FORM cb dot INST

    colon  shift, and go to state 77

    $default  reduce using rule 34 (FORM)

    FORM  go to state 78


state 51

   40 CONDU: lo_not ob . COND cb

    lo_not  shift, and go to state 31
    ob      shift, and go to state 32

    COND   go to state 79
    CONDU  go to state 34


state 52

   32 EXPU: ob . EXP cb
   39 CONDU: ob . EXP CO EXP cb
   41      | ob . COND cb

    lo_not   shift, and go to state 31
    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 52

    CST    go to state 41
    EXP    go to state 80
    EXPU   go to state 43
    COND   go to state 54
    CONDU  go to state 34


state 53

   28 EXP: EXP . ARITH EXPU
   39 CONDU: ob EXP . CO EXP cb

    plus      shift, and go to state 61
    minus     shift, and go to state 62
    multi     shift, and go to state 63
    division  shift, and go to state 64
    co_g      shift, and go to state 81
    co_l      shift, and go to state 82
    co_ge     shift, and go to state 83
    co_le     shift, and go to state 84
    co_eq     shift, and go to state 85
    co_diff   shift, and go to state 86

    ARITH  go to state 65
    CO     go to state 87


state 54

   37 COND: COND . LO CONDU
   41 CONDU: ob COND . cb

    lo_and  shift, and go to state 55
    lo_or   shift, and go to state 56
    cb      shift, and go to state 88

    LO  go to state 58


state 55

   46 LO: lo_and .

    $default  reduce using rule 46 (LO)


state 56

   47 LO: lo_or .

    $default  reduce using rule 47 (LO)


state 57

   23 INST: kw_if COND colon . INST ELSE kw_end dot INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 89


state 58

   37 COND: COND LO . CONDU

    lo_not  shift, and go to state 31
    ob      shift, and go to state 32

    CONDU  go to state 90


state 59

   28 EXP: EXP . ARITH EXPU
   32 EXPU: ob EXP . cb

    plus      shift, and go to state 61
    minus     shift, and go to state 62
    multi     shift, and go to state 63
    division  shift, and go to state 64
    cb        shift, and go to state 91

    ARITH  go to state 65


state 60

   24 INST: kw_move EXP kw_to . EXP INST kw_end dot INST

    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 40

    CST   go to state 41
    EXP   go to state 92
    EXPU  go to state 43


state 61

   42 ARITH: plus .

    $default  reduce using rule 42 (ARITH)


state 62

   43 ARITH: minus .

    $default  reduce using rule 43 (ARITH)


state 63

   44 ARITH: multi .

    $default  reduce using rule 44 (ARITH)


state 64

   45 ARITH: division .

    $default  reduce using rule 45 (ARITH)


state 65

   28 EXP: EXP ARITH . EXPU

    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 40

    CST   go to state 41
    EXPU  go to state 93


state 66

   20 INST: idf equal EXP . dot INST
   28 EXP: EXP . ARITH EXPU

    dot       shift, and go to state 94
    plus      shift, and go to state 61
    minus     shift, and go to state 62
    multi     shift, and go to state 63
    division  shift, and go to state 64

    ARITH  go to state 65


state 67

    7 DEC: kw_const idf . TYPE dot DEC
    8    | kw_const idf . equal CST dot DEC

    kw_int    shift, and go to state 68
    kw_float  shift, and go to state 69
    kw_str    shift, and go to state 70
    kw_char   shift, and go to state 71
    equal     shift, and go to state 95

    TYPE  go to state 96


state 68

   12 TYPE: kw_int .

    $default  reduce using rule 12 (TYPE)


state 69

   13 TYPE: kw_float .

    $default  reduce using rule 13 (TYPE)


state 70

   15 TYPE: kw_str .

    $default  reduce using rule 15 (TYPE)


state 71

   14 TYPE: kw_char .

    $default  reduce using rule 14 (TYPE)


state 72

    6 DEC: idf kw_line . t_int verg kw_size t_int TYPE dot DEC

    t_int  shift, and go to state 97


state 73

   10 VARLISTE: idf bar . VARLISTE

    idf  shift, and go to state 98

    VARLISTE  go to state 99


state 74

   11 VARLISTE: idf TYPE .

    $default  reduce using rule 11 (VARLISTE)


state 75

    5 DEC: VARLISTE dot . DEC

    kw_const  shift, and go to state 45
    idf       shift, and go to state 46

    $default  reduce using rule 9 (DEC)

    DEC       go to state 100
    VARLISTE  go to state 48


state 76

   21 INST: f_accept ob t_str colon . at idf cb dot INST

    at  shift, and go to state 101


state 77

   33 FORM: colon . at idf FORMU

    at  shift, and go to state 102


state 78

   22 INST: f_display ob t_str FORM . cb dot INST

    cb  shift, and go to state 103


state 79

   37 COND: COND . LO CONDU
   40 CONDU: lo_not ob COND . cb

    lo_and  shift, and go to state 55
    lo_or   shift, and go to state 56
    cb      shift, and go to state 104

    LO  go to state 58


state 80

   28 EXP: EXP . ARITH EXPU
   32 EXPU: ob EXP . cb
   39 CONDU: ob EXP . CO EXP cb

    plus      shift, and go to state 61
    minus     shift, and go to state 62
    multi     shift, and go to state 63
    division  shift, and go to state 64
    cb        shift, and go to state 91
    co_g      shift, and go to state 81
    co_l      shift, and go to state 82
    co_ge     shift, and go to state 83
    co_le     shift, and go to state 84
    co_eq     shift, and go to state 85
    co_diff   shift, and go to state 86

    ARITH  go to state 65
    CO     go to state 87


state 81

   48 CO: co_g .

    $default  reduce using rule 48 (CO)


state 82

   49 CO: co_l .

    $default  reduce using rule 49 (CO)


state 83

   50 CO: co_ge .

    $default  reduce using rule 50 (CO)


state 84

   51 CO: co_le .

    $default  reduce using rule 51 (CO)


state 85

   52 CO: co_eq .

    $default  reduce using rule 52 (CO)


state 86

   53 CO: co_diff .

    $default  reduce using rule 53 (CO)


state 87

   39 CONDU: ob EXP CO . EXP cb

    idf      shift, and go to state 35
    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39
    ob       shift, and go to state 40

    CST   go to state 41
    EXP   go to state 105
    EXPU  go to state 43


state 88

   41 CONDU: ob COND cb .

    $default  reduce using rule 41 (CONDU)


state 89

   23 INST: kw_if COND colon INST . ELSE kw_end dot INST

    kw_else  shift, and go to state 106

    $default  reduce using rule 27 (ELSE)

    ELSE  go to state 107


state 90

   37 COND: COND LO CONDU .

    $default  reduce using rule 37 (COND)


state 91

   32 EXPU: ob EXP cb .

    $default  reduce using rule 32 (EXPU)


state 92

   24 INST: kw_move EXP kw_to EXP . INST kw_end dot INST
   28 EXP: EXP . ARITH EXPU

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25
    plus       shift, and go to state 61
    minus      shift, and go to state 62
    multi      shift, and go to state 63
    division   shift, and go to state 64

    $default  reduce using rule 25 (INST)

    INST   go to state 108
    ARITH  go to state 65


state 93

   28 EXP: EXP ARITH EXPU .

    $default  reduce using rule 28 (EXP)


state 94

   20 INST: idf equal EXP dot . INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 109


state 95

    8 DEC: kw_const idf equal . CST dot DEC

    t_int    shift, and go to state 36
    t_float  shift, and go to state 37
    t_char   shift, and go to state 38
    t_str    shift, and go to state 39

    CST  go to state 110


state 96

    7 DEC: kw_const idf TYPE . dot DEC

    dot  shift, and go to state 111


state 97

    6 DEC: idf kw_line t_int . verg kw_size t_int TYPE dot DEC

    verg  shift, and go to state 112


state 98

   10 VARLISTE: idf . bar VARLISTE
   11         | idf . TYPE

    kw_int    shift, and go to state 68
    kw_float  shift, and go to state 69
    kw_str    shift, and go to state 70
    kw_char   shift, and go to state 71
    bar       shift, and go to state 73

    TYPE  go to state 74


state 99

   10 VARLISTE: idf bar VARLISTE .

    $default  reduce using rule 10 (VARLISTE)


state 100

    5 DEC: VARLISTE dot DEC .

    $default  reduce using rule 5 (DEC)


state 101

   21 INST: f_accept ob t_str colon at . idf cb dot INST

    idf  shift, and go to state 113


state 102

   33 FORM: colon at . idf FORMU

    idf  shift, and go to state 114


state 103

   22 INST: f_display ob t_str FORM cb . dot INST

    dot  shift, and go to state 115


state 104

   40 CONDU: lo_not ob COND cb .

    $default  reduce using rule 40 (CONDU)


state 105

   28 EXP: EXP . ARITH EXPU
   39 CONDU: ob EXP CO EXP . cb

    plus      shift, and go to state 61
    minus     shift, and go to state 62
    multi     shift, and go to state 63
    division  shift, and go to state 64
    cb        shift, and go to state 116

    ARITH  go to state 65


state 106

   26 ELSE: kw_else . colon INST

    colon  shift, and go to state 117


state 107

   23 INST: kw_if COND colon INST ELSE . kw_end dot INST

    kw_end  shift, and go to state 118


state 108

   24 INST: kw_move EXP kw_to EXP INST . kw_end dot INST

    kw_end  shift, and go to state 119


state 109

   20 INST: idf equal EXP dot INST .

    $default  reduce using rule 20 (INST)


state 110

    8 DEC: kw_const idf equal CST . dot DEC

    dot  shift, and go to state 120


state 111

    7 DEC: kw_const idf TYPE dot . DEC

    kw_const  shift, and go to state 45
    idf       shift, and go to state 46

    $default  reduce using rule 9 (DEC)

    DEC       go to state 121
    VARLISTE  go to state 48


state 112

    6 DEC: idf kw_line t_int verg . kw_size t_int TYPE dot DEC

    kw_size  shift, and go to state 122


state 113

   21 INST: f_accept ob t_str colon at idf . cb dot INST

    cb  shift, and go to state 123


state 114

   33 FORM: colon at idf . FORMU

    verg  shift, and go to state 124

    $default  reduce using rule 36 (FORMU)

    FORMU  go to state 125


state 115

   22 INST: f_display ob t_str FORM cb dot . INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 126


state 116

   39 CONDU: ob EXP CO EXP cb .

    $default  reduce using rule 39 (CONDU)


state 117

   26 ELSE: kw_else colon . INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 127


state 118

   23 INST: kw_if COND colon INST ELSE kw_end . dot INST

    dot  shift, and go to state 128


state 119

   24 INST: kw_move EXP kw_to EXP INST kw_end . dot INST

    dot  shift, and go to state 129


state 120

    8 DEC: kw_const idf equal CST dot . DEC

    kw_const  shift, and go to state 45
    idf       shift, and go to state 46

    $default  reduce using rule 9 (DEC)

    DEC       go to state 130
    VARLISTE  go to state 48


state 121

    7 DEC: kw_const idf TYPE dot DEC .

    $default  reduce using rule 7 (DEC)


state 122

    6 DEC: idf kw_line t_int verg kw_size . t_int TYPE dot DEC

    t_int  shift, and go to state 131


state 123

   21 INST: f_accept ob t_str colon at idf cb . dot INST

    dot  shift, and go to state 132


state 124

   35 FORMU: verg . at idf FORMU

    at  shift, and go to state 133


state 125

   33 FORM: colon at idf FORMU .

    $default  reduce using rule 33 (FORM)


state 126

   22 INST: f_display ob t_str FORM cb dot INST .

    $default  reduce using rule 22 (INST)


state 127

   26 ELSE: kw_else colon INST .

    $default  reduce using rule 26 (ELSE)


state 128

   23 INST: kw_if COND colon INST ELSE kw_end dot . INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 134


state 129

   24 INST: kw_move EXP kw_to EXP INST kw_end dot . INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 135


state 130

    8 DEC: kw_const idf equal CST dot DEC .

    $default  reduce using rule 8 (DEC)


state 131

    6 DEC: idf kw_line t_int verg kw_size t_int . TYPE dot DEC

    kw_int    shift, and go to state 68
    kw_float  shift, and go to state 69
    kw_str    shift, and go to state 70
    kw_char   shift, and go to state 71

    TYPE  go to state 136


state 132

   21 INST: f_accept ob t_str colon at idf cb dot . INST

    f_accept   shift, and go to state 21
    f_display  shift, and go to state 22
    kw_if      shift, and go to state 23
    kw_move    shift, and go to state 24
    idf        shift, and go to state 25

    $default  reduce using rule 25 (INST)

    INST  go to state 137


state 133

   35 FORMU: verg at . idf FORMU

    idf  shift, and go to state 138


state 134

   23 INST: kw_if COND colon INST ELSE kw_end dot INST .

    $default  reduce using rule 23 (INST)


state 135

   24 INST: kw_move EXP kw_to EXP INST kw_end dot INST .

    $default  reduce using rule 24 (INST)


state 136

    6 DEC: idf kw_line t_int verg kw_size t_int TYPE . dot DEC

    dot  shift, and go to state 139


state 137

   21 INST: f_accept ob t_str colon at idf cb dot INST .

    $default  reduce using rule 21 (INST)


state 138

   35 FORMU: verg at idf . FORMU

    verg  shift, and go to state 124

    $default  reduce using rule 36 (FORMU)

    FORMU  go to state 140


state 139

    6 DEC: idf kw_line t_int verg kw_size t_int TYPE dot . DEC

    kw_const  shift, and go to state 45
    idf       shift, and go to state 46

    $default  reduce using rule 9 (DEC)

    DEC       go to state 141
    VARLISTE  go to state 48


state 140

   35 FORMU: verg at idf FORMU .

    $default  reduce using rule 35 (FORMU)


state 141

    6 DEC: idf kw_line t_int verg kw_size t_int TYPE dot DEC .

    $default  reduce using rule 6 (DEC)
